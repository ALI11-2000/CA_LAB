$date
	Sun Oct 31 22:59:47 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module top $end
$var wire 1 ! clk $end
$var wire 1 " hard_write $end
$var wire 32 # num1 [31:0] $end
$var wire 32 $ num2 [31:0] $end
$var wire 1 % rst $end
$var wire 32 & x9 [31:0] $end
$var wire 32 ' x8 [31:0] $end
$var wire 32 ( x7 [31:0] $end
$var wire 32 ) x6 [31:0] $end
$var wire 32 * x5 [31:0] $end
$var wire 32 + x4 [31:0] $end
$var wire 32 , x31 [31:0] $end
$var wire 32 - x30 [31:0] $end
$var wire 32 . x3 [31:0] $end
$var wire 32 / x29 [31:0] $end
$var wire 32 0 x28 [31:0] $end
$var wire 32 1 x27 [31:0] $end
$var wire 32 2 x26 [31:0] $end
$var wire 32 3 x25 [31:0] $end
$var wire 32 4 x24 [31:0] $end
$var wire 32 5 x23 [31:0] $end
$var wire 32 6 x22 [31:0] $end
$var wire 32 7 x21 [31:0] $end
$var wire 32 8 x20 [31:0] $end
$var wire 32 9 x2 [31:0] $end
$var wire 32 : x19 [31:0] $end
$var wire 32 ; x18 [31:0] $end
$var wire 32 < x17 [31:0] $end
$var wire 32 = x16 [31:0] $end
$var wire 32 > x15 [31:0] $end
$var wire 32 ? x14 [31:0] $end
$var wire 32 @ x13 [31:0] $end
$var wire 32 A x12 [31:0] $end
$var wire 32 B x11 [31:0] $end
$var wire 32 C x10 [31:0] $end
$var wire 32 D x1 [31:0] $end
$var wire 32 E x0 [31:0] $end
$var wire 1 F wr_enE $end
$var wire 1 G wr_en $end
$var wire 1 H wb_selE $end
$var wire 2 I wb_sel [1:0] $end
$var wire 1 J unsign $end
$var wire 1 K sel_BE $end
$var wire 1 L sel_B $end
$var wire 1 M sel_AE $end
$var wire 1 N sel_A $end
$var wire 32 O rs2_E [31:0] $end
$var wire 32 P rs1_E [31:0] $end
$var wire 32 Q result [31:0] $end
$var wire 1 R reg_wrE $end
$var wire 1 S reg_wr $end
$var wire 32 T rdata2 [31:0] $end
$var wire 32 U rdata1 [31:0] $end
$var wire 32 V rdata [31:0] $end
$var wire 1 W rd_enE $end
$var wire 1 X rd_en $end
$var wire 3 Y br_typeE [2:0] $end
$var wire 3 Z br_type [2:0] $end
$var wire 1 [ br_taken $end
$var wire 4 \ alu_opE [3:0] $end
$var wire 4 ] alu_op [3:0] $end
$var wire 32 ^ PC_E [31:0] $end
$var wire 32 _ PC_D [31:0] $end
$var wire 32 ` PC [31:0] $end
$var wire 32 a Instruction_E [31:0] $end
$var wire 32 b Instruction_D [31:0] $end
$var wire 32 c Instruction [31:0] $end
$var wire 32 d Immediate_Value_E [31:0] $end
$var wire 32 e Immediate_Value [31:0] $end
$var wire 32 f ALU_out [31:0] $end
$var reg 32 g A [31:0] $end
$var reg 32 h B [31:0] $end
$var reg 32 i wdata [31:0] $end
$scope module al $end
$var wire 32 j A [31:0] $end
$var wire 32 k B [31:0] $end
$var wire 4 l alu_op [3:0] $end
$var reg 32 m ALU_out [31:0] $end
$upscope $end
$scope module bcond $end
$var wire 3 n br_type [2:0] $end
$var wire 32 o B [31:0] $end
$var wire 32 p A [31:0] $end
$var reg 1 [ br_taken $end
$upscope $end
$scope module cont $end
$var wire 7 q opcode [6:0] $end
$var wire 7 r func7 [6:0] $end
$var wire 3 s func3 [2:0] $end
$var wire 32 t Instruction [31:0] $end
$var reg 4 u alu_op [3:0] $end
$var reg 3 v br_type [2:0] $end
$var reg 1 X rd_en $end
$var reg 1 S reg_wr $end
$var reg 1 N sel_A $end
$var reg 1 L sel_B $end
$var reg 1 J unsign $end
$var reg 2 w wb_sel [1:0] $end
$var reg 1 G wr_en $end
$upscope $end
$scope module dmem $end
$var wire 32 x addr [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " hard_write $end
$var wire 32 y num1 [31:0] $end
$var wire 32 z num2 [31:0] $end
$var wire 1 X rd_en $end
$var wire 1 % rst $end
$var wire 1 G wr_en $end
$var wire 32 { wdata [31:0] $end
$var reg 32 | a1 [31:0] $end
$var reg 32 } a2 [31:0] $end
$var reg 32 ~ rdata [31:0] $end
$var reg 32 !" result [31:0] $end
$var integer 32 "" i [31:0] $end
$upscope $end
$scope module ig $end
$var wire 1 J unsign $end
$var wire 7 #" opcode [6:0] $end
$var wire 32 $" Instruction [31:0] $end
$var reg 32 %" Immediate_Value [31:0] $end
$upscope $end
$scope module im $end
$var wire 32 &" Address [31:0] $end
$var reg 32 '" Instruction [31:0] $end
$upscope $end
$scope module pc $end
$var wire 32 (" ALU_out [31:0] $end
$var wire 1 )" auipc $end
$var wire 1 [ br_taken $end
$var wire 1 ! clk $end
$var wire 1 " hard_write $end
$var wire 1 % rst $end
$var reg 32 *" PC [31:0] $end
$upscope $end
$scope module pipeline_decode $end
$var wire 32 +" Instruction [31:0] $end
$var wire 32 ," PC [31:0] $end
$var wire 1 ! clk $end
$var reg 32 -" Instruction_D [31:0] $end
$var reg 32 ." PC_D [31:0] $end
$upscope $end
$scope module pipeline_execute $end
$var wire 32 /" Immediate_Value [31:0] $end
$var wire 32 0" Instruction_D [31:0] $end
$var wire 32 1" PC_D [31:0] $end
$var wire 4 2" alu_op [3:0] $end
$var wire 3 3" br_type [2:0] $end
$var wire 1 ! clk $end
$var wire 1 X rd_en $end
$var wire 1 S reg_wr $end
$var wire 1 N sel_A $end
$var wire 1 L sel_B $end
$var wire 1 4" wb_sel $end
$var wire 1 G wr_en $end
$var wire 32 5" rdata2 [31:0] $end
$var wire 32 6" rdata1 [31:0] $end
$var reg 32 7" Immediate_Value_E [31:0] $end
$var reg 32 8" Instruction_E [31:0] $end
$var reg 32 9" PC_E [31:0] $end
$var reg 4 :" alu_opE [3:0] $end
$var reg 3 ;" br_typeE [2:0] $end
$var reg 1 W rd_enE $end
$var reg 1 R reg_wrE $end
$var reg 32 <" rs1_E [31:0] $end
$var reg 32 =" rs2_E [31:0] $end
$var reg 1 M sel_AE $end
$var reg 1 K sel_BE $end
$var reg 1 H wb_selE $end
$var reg 1 F wr_enE $end
$upscope $end
$scope module rf $end
$var wire 1 ! clk $end
$var wire 5 >" raddr1 [4:0] $end
$var wire 5 ?" raddr2 [4:0] $end
$var wire 1 S reg_wr $end
$var wire 1 % rst $end
$var wire 5 @" waddr [4:0] $end
$var wire 32 A" wdata [31:0] $end
$var reg 32 B" rdata1 [31:0] $end
$var reg 32 C" rdata2 [31:0] $end
$var reg 32 D" x0 [31:0] $end
$var reg 32 E" x1 [31:0] $end
$var reg 32 F" x10 [31:0] $end
$var reg 32 G" x11 [31:0] $end
$var reg 32 H" x12 [31:0] $end
$var reg 32 I" x13 [31:0] $end
$var reg 32 J" x14 [31:0] $end
$var reg 32 K" x15 [31:0] $end
$var reg 32 L" x16 [31:0] $end
$var reg 32 M" x17 [31:0] $end
$var reg 32 N" x18 [31:0] $end
$var reg 32 O" x19 [31:0] $end
$var reg 32 P" x2 [31:0] $end
$var reg 32 Q" x20 [31:0] $end
$var reg 32 R" x21 [31:0] $end
$var reg 32 S" x22 [31:0] $end
$var reg 32 T" x23 [31:0] $end
$var reg 32 U" x24 [31:0] $end
$var reg 32 V" x25 [31:0] $end
$var reg 32 W" x26 [31:0] $end
$var reg 32 X" x27 [31:0] $end
$var reg 32 Y" x28 [31:0] $end
$var reg 32 Z" x29 [31:0] $end
$var reg 32 [" x3 [31:0] $end
$var reg 32 \" x30 [31:0] $end
$var reg 32 ]" x31 [31:0] $end
$var reg 32 ^" x4 [31:0] $end
$var reg 32 _" x5 [31:0] $end
$var reg 32 `" x6 [31:0] $end
$var reg 32 a" x7 [31:0] $end
$var reg 32 b" x8 [31:0] $end
$var reg 32 c" x9 [31:0] $end
$var integer 32 d" i [31:0] $end
$upscope $end
$upscope $end
$scope module top $end
$scope module al $end
$upscope $end
$scope module bcond $end
$upscope $end
$scope module cont $end
$upscope $end
$scope module dmem $end
$upscope $end
$scope module ig $end
$upscope $end
$scope module im $end
$upscope $end
$scope module pc $end
$upscope $end
$scope module pipeline_decode $end
$upscope $end
$scope module pipeline_execute $end
$upscope $end
$scope module rf $end
$upscope $end
$upscope $end
$scope module top $end
$scope module al $end
$upscope $end
$scope module bcond $end
$upscope $end
$scope module cont $end
$upscope $end
$scope module dmem $end
$upscope $end
$scope module ig $end
$upscope $end
$scope module im $end
$upscope $end
$scope module pc $end
$upscope $end
$scope module pipeline_decode $end
$upscope $end
$scope module pipeline_execute $end
$upscope $end
$scope module rf $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx d"
bx c"
bx b"
bx a"
bx `"
bx _"
bx ^"
bx ]"
bx \"
bx ["
bx Z"
bx Y"
bx X"
bx W"
bx V"
bx U"
bx T"
bx S"
bx R"
bx Q"
bx P"
bx O"
bx N"
bx M"
bx L"
bx K"
bx J"
bx I"
bx H"
bx G"
bx F"
bx E"
bx D"
bx C"
bx B"
bx A"
bx @"
bx ?"
bx >"
bx ="
bx <"
b111 ;"
b0 :"
bx 9"
bx 8"
b0 7"
bx 6"
bx 5"
04"
b111 3"
b0 2"
bx 1"
bx 0"
b0 /"
bx ."
bx -"
bx ,"
bx +"
bx *"
z)"
bx ("
bx '"
bx &"
b0 %"
bx $"
bx #"
bx ""
bx !"
bx ~
b100 }
bx |
bx {
b100 z
b10 y
bx x
b0 w
b111 v
b0 u
bx t
bx s
bx r
bx q
bx p
bx o
b111 n
bx m
b0 l
bx k
bx j
bx i
bx h
bx g
bx f
b0 e
b0 d
bx c
bx b
bx a
bx `
bx _
bx ^
b0 ]
b0 \
0[
b111 Z
b111 Y
0X
0W
bx V
bx U
bx T
0S
0R
bx Q
bx P
bx O
0N
0M
0L
0K
0J
b0 I
0H
0G
0F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
1%
b100 $
b10 #
z"
1!
$end
#5000
0!
#10000
0%
b100 }
b0 |
b100 i
b100 A"
b10010000000011 c
b10010000000011 '"
b10010000000011 +"
b0 ,
b0 ]"
b0 -
b0 \"
b0 /
b0 Z"
b0 0
b0 Y"
b0 1
b0 X"
b0 2
b0 W"
b0 3
b0 V"
b0 4
b0 U"
b0 5
b0 T"
b0 6
b0 S"
b0 7
b0 R"
b0 8
b0 Q"
b0 :
b0 O"
b0 ;
b0 N"
b0 <
b0 M"
b0 =
b0 L"
b0 >
b0 K"
b0 ?
b0 J"
b0 @
b0 I"
b0 A
b0 H"
b0 B
b0 G"
b0 C
b0 F"
b0 &
b0 c"
b0 '
b0 b"
b0 (
b0 a"
b0 )
b0 `"
b0 *
b0 _"
b0 +
b0 ^"
b0 .
b0 ["
b0 9
b0 P"
b0 D
b0 E"
b0 E
b0 D"
b0 `
b0 &"
b0 *"
b0 ,"
b100000000 ""
b100000 d"
1!
#15000
0!
#20000
b0 T
b0 {
b0 5"
b0 C"
b0 U
b0 6"
b0 B"
bx i
bx A"
b10000000010010010000011 c
b10000000010010010000011 '"
b10000000010010010000011 +"
b10 I
b10 w
1X
1L
1S
b11 #"
b10 s
b0 r
b11 q
b1000 @"
b0 ?"
b0 >"
b10010000000011 b
b10010000000011 t
b10010000000011 $"
b10010000000011 -"
b10010000000011 0"
b0 _
b0 ."
b0 1"
b100 `
b100 &"
b100 *"
b100 ,"
b0 Q
b0 !"
1!
#25000
0!
#30000
b10 |
1"
b10 i
b10 A"
b10 V
b10 ~
b0 f
b0 m
b0 x
b0 ("
b100101000000110001100011 c
b100101000000110001100011 '"
b100101000000110001100011 +"
bx '
bx b"
b0 h
b0 k
b0 g
b0 j
b100 e
b100 %"
b100 /"
b1001 @"
b100 ?"
b1000 `
b1000 &"
b1000 *"
b1000 ,"
1R
1K
1W
b10010000000011 a
b10010000000011 8"
b0 O
b0 o
b0 ="
b0 P
b0 p
b0 <"
b0 ^
b0 9"
b10000000010010010000011 b
b10000000010010010000011 t
b10000000010010010000011 $"
b10000000010010010000011 -"
b10000000010010010000011 0"
b100 _
b100 ."
b100 1"
1!
#35000
0!
#40000
0"
b100 f
b100 m
b100 x
b100 ("
b100 i
b100 A"
b10 T
b10 {
b10 5"
b10 C"
bx U
bx 6"
bx B"
b11000 e
b11000 %"
b11000 /"
b100 h
b100 k
b10 &
b10 c"
b10010000000011 c
b10010000000011 '"
b10010000000011 +"
b0 Z
b0 v
b0 3"
1N
b0 I
b0 w
0X
1L
0S
b1100011 #"
b0 s
b1100011 q
b11000 @"
b1001 ?"
b1000 >"
b100101000000110001100011 b
b100101000000110001100011 t
b100101000000110001100011 $"
b100101000000110001100011 -"
b100101000000110001100011 0"
b1000 _
b1000 ."
b1000 1"
b10000000010010010000011 a
b10000000010010010000011 8"
b100 d
b100 7"
b100 ^
b100 9"
b0 `
b0 &"
b0 *"
b0 ,"
1!
#45000
0!
#50000
b100000 f
b100000 m
b100000 x
b100000 ("
b0 V
b0 ~
b0 T
b0 {
b0 5"
b0 C"
b0 U
b0 6"
b0 B"
b0 i
b0 A"
b10000000010010010000011 c
b10000000010010010000011 '"
b10000000010010010000011 +"
x[
b11000 h
b11000 k
b1000 g
b1000 j
b0 e
b0 %"
b0 /"
b10 I
b10 w
1X
1S
b111 Z
b111 v
b111 3"
1L
0N
b11 #"
b10 s
b11 q
b1000 @"
b0 ?"
b0 >"
b100 `
b100 &"
b100 *"
b100 ,"
0R
1M
0W
b0 Y
b0 n
b0 ;"
b100101000000110001100011 a
b100101000000110001100011 8"
b11000 d
b11000 7"
b10 O
b10 o
b10 ="
bx P
bx p
bx <"
b1000 ^
b1000 9"
b10010000000011 b
b10010000000011 t
b10010000000011 $"
b10010000000011 -"
b10010000000011 0"
b0 _
b0 ."
b0 1"
1!
#55000
0!
#60000
b10 i
b10 A"
b10 V
b10 ~
b0 f
b0 m
b0 x
b0 ("
b100 e
b100 %"
b100 /"
0[
b0 h
b0 k
b0 g
b0 j
b0 '
b0 b"
bx c
bx '"
bx +"
b1001 @"
b100 ?"
b10000000010010010000011 b
b10000000010010010000011 t
b10000000010010010000011 $"
b10000000010010010000011 -"
b10000000010010010000011 0"
b100 _
b100 ."
b100 1"
1R
0M
1W
b111 Y
b111 n
b111 ;"
b10010000000011 a
b10010000000011 8"
b0 d
b0 7"
b0 O
b0 o
b0 ="
b0 P
b0 p
b0 <"
b0 ^
b0 9"
b0x0x000 `
b0x0x000 &"
b0x0x000 *"
b0x0x000 ,"
1!
#65000
0!
#70000
b100 f
b100 m
b100 x
b100 ("
bx i
bx A"
bx T
bx {
bx 5"
bx C"
bx U
bx 6"
bx B"
b100 h
b100 k
b0 e
b0 %"
b0 /"
b0 I
b0 w
0X
0L
0S
bx #"
bx s
bx r
bx q
bx @"
bx ?"
bx >"
bx `
bx &"
bx *"
bx ,"
b10000000010010010000011 a
b10000000010010010000011 8"
b100 d
b100 7"
b100 ^
b100 9"
bx b
bx t
bx $"
bx -"
bx 0"
b0x0x000 _
b0x0x000 ."
b0x0x000 1"
1!
#70001
