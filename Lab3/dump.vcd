$date
	Sun Oct 17 18:21:58 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module top $end
$var wire 32 ! ALU_out [31:0] $end
$var wire 1 " br_taken $end
$var wire 1 # clk $end
$var wire 5 $ raddr1 [4:0] $end
$var wire 5 % raddr2 [4:0] $end
$var wire 1 & reg_wr $end
$var wire 1 ' rst $end
$var wire 5 ( waddr [4:0] $end
$var wire 32 ) wdata [31:0] $end
$var wire 32 * x9 [31:0] $end
$var wire 32 + x8 [31:0] $end
$var wire 32 , x7 [31:0] $end
$var wire 32 - x6 [31:0] $end
$var wire 32 . x5 [31:0] $end
$var wire 32 / x4 [31:0] $end
$var wire 32 0 x31 [31:0] $end
$var wire 32 1 x30 [31:0] $end
$var wire 32 2 x3 [31:0] $end
$var wire 32 3 x29 [31:0] $end
$var wire 32 4 x28 [31:0] $end
$var wire 32 5 x27 [31:0] $end
$var wire 32 6 x26 [31:0] $end
$var wire 32 7 x25 [31:0] $end
$var wire 32 8 x24 [31:0] $end
$var wire 32 9 x23 [31:0] $end
$var wire 32 : x22 [31:0] $end
$var wire 32 ; x21 [31:0] $end
$var wire 32 < x20 [31:0] $end
$var wire 32 = x2 [31:0] $end
$var wire 32 > x19 [31:0] $end
$var wire 32 ? x18 [31:0] $end
$var wire 32 @ x17 [31:0] $end
$var wire 32 A x16 [31:0] $end
$var wire 32 B x15 [31:0] $end
$var wire 32 C x14 [31:0] $end
$var wire 32 D x13 [31:0] $end
$var wire 32 E x12 [31:0] $end
$var wire 32 F x11 [31:0] $end
$var wire 32 G x10 [31:0] $end
$var wire 32 H x1 [31:0] $end
$var wire 32 I x0 [31:0] $end
$var wire 32 J rdata2 [31:0] $end
$var wire 32 K rdata1 [31:0] $end
$var wire 32 L PC [31:0] $end
$var wire 32 M Instruction [31:0] $end
$var wire 32 N Immediate_Value [31:0] $end
$scope module ig $end
$var wire 32 O Instruction [31:0] $end
$var reg 32 P Immediate_Value [31:0] $end
$upscope $end
$scope module im $end
$var wire 32 Q Address [31:0] $end
$var reg 32 R Instruction [31:0] $end
$upscope $end
$scope module pc $end
$var wire 32 S ALU_out [31:0] $end
$var wire 1 " br_taken $end
$var wire 1 # clk $end
$var wire 1 ' rst $end
$var reg 32 T PC [31:0] $end
$upscope $end
$scope module rf $end
$var wire 1 # clk $end
$var wire 5 U raddr1 [4:0] $end
$var wire 5 V raddr2 [4:0] $end
$var wire 1 & reg_wr $end
$var wire 1 ' rst $end
$var wire 5 W waddr [4:0] $end
$var wire 32 X wdata [31:0] $end
$var reg 32 Y rdata1 [31:0] $end
$var reg 32 Z rdata2 [31:0] $end
$var reg 32 [ x0 [31:0] $end
$var reg 32 \ x1 [31:0] $end
$var reg 32 ] x10 [31:0] $end
$var reg 32 ^ x11 [31:0] $end
$var reg 32 _ x12 [31:0] $end
$var reg 32 ` x13 [31:0] $end
$var reg 32 a x14 [31:0] $end
$var reg 32 b x15 [31:0] $end
$var reg 32 c x16 [31:0] $end
$var reg 32 d x17 [31:0] $end
$var reg 32 e x18 [31:0] $end
$var reg 32 f x19 [31:0] $end
$var reg 32 g x2 [31:0] $end
$var reg 32 h x20 [31:0] $end
$var reg 32 i x21 [31:0] $end
$var reg 32 j x22 [31:0] $end
$var reg 32 k x23 [31:0] $end
$var reg 32 l x24 [31:0] $end
$var reg 32 m x25 [31:0] $end
$var reg 32 n x26 [31:0] $end
$var reg 32 o x27 [31:0] $end
$var reg 32 p x28 [31:0] $end
$var reg 32 q x29 [31:0] $end
$var reg 32 r x3 [31:0] $end
$var reg 32 s x30 [31:0] $end
$var reg 32 t x31 [31:0] $end
$var reg 32 u x4 [31:0] $end
$var reg 32 v x5 [31:0] $end
$var reg 32 w x6 [31:0] $end
$var reg 32 x x7 [31:0] $end
$var reg 32 y x8 [31:0] $end
$var reg 32 z x9 [31:0] $end
$var integer 32 { i [31:0] $end
$upscope $end
$upscope $end
$scope module top $end
$scope module ig $end
$upscope $end
$scope module im $end
$upscope $end
$scope module pc $end
$upscope $end
$scope module rf $end
$upscope $end
$upscope $end
$scope module top $end
$scope module ig $end
$upscope $end
$scope module im $end
$upscope $end
$scope module pc $end
$upscope $end
$scope module rf $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bz X
bz W
bz V
bz U
bx T
bz S
b1010101011000010100010011 R
bx Q
b10101 P
b1010101011000010100010011 O
b10101 N
b1010101011000010100010011 M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bz )
bz (
z'
z&
bz %
bz $
z#
z"
bz !
$end
#2000
b100 N
b100 P
b101000000010001000100011 M
b101000000010001000100011 O
b101000000010001000100011 R
#4000
b11111111111111111111111111111000 N
b11111111111111111111111111111000 P
b11111110000000000000110011100011 M
b11111110000000000000110011100011 O
b11111110000000000000110011100011 R
#6000
b11111111111111111111111111110100 N
b11111111111111111111111111110100 P
b11111111010111111111000001101111 M
b11111111010111111111000001101111 O
b11111111010111111111000001101111 R
#8000
b10011010010000000000000 N
b10011010010000000000000 P
b10011010010010100110111 M
b10011010010010100110111 O
b10011010010010100110111 R
#10001
