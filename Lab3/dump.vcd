$date
	Sun Oct 17 14:59:08 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module top $end
$var wire 1 ! clk $end
$var wire 5 " raddr1 [4:0] $end
$var wire 5 # raddr2 [4:0] $end
$var wire 1 $ reg_wr $end
$var wire 1 % rst $end
$var wire 5 & waddr [4:0] $end
$var wire 32 ' wdata [31:0] $end
$var wire 32 ( x9 [31:0] $end
$var wire 32 ) x8 [31:0] $end
$var wire 32 * x7 [31:0] $end
$var wire 32 + x6 [31:0] $end
$var wire 32 , x5 [31:0] $end
$var wire 32 - x4 [31:0] $end
$var wire 32 . x31 [31:0] $end
$var wire 32 / x30 [31:0] $end
$var wire 32 0 x3 [31:0] $end
$var wire 32 1 x29 [31:0] $end
$var wire 32 2 x28 [31:0] $end
$var wire 32 3 x27 [31:0] $end
$var wire 32 4 x26 [31:0] $end
$var wire 32 5 x25 [31:0] $end
$var wire 32 6 x24 [31:0] $end
$var wire 32 7 x23 [31:0] $end
$var wire 32 8 x22 [31:0] $end
$var wire 32 9 x21 [31:0] $end
$var wire 32 : x20 [31:0] $end
$var wire 32 ; x2 [31:0] $end
$var wire 32 < x19 [31:0] $end
$var wire 32 = x18 [31:0] $end
$var wire 32 > x17 [31:0] $end
$var wire 32 ? x16 [31:0] $end
$var wire 32 @ x15 [31:0] $end
$var wire 32 A x14 [31:0] $end
$var wire 32 B x13 [31:0] $end
$var wire 32 C x12 [31:0] $end
$var wire 32 D x11 [31:0] $end
$var wire 32 E x10 [31:0] $end
$var wire 32 F x1 [31:0] $end
$var wire 32 G x0 [31:0] $end
$var wire 32 H rdata2 [31:0] $end
$var wire 32 I rdata1 [31:0] $end
$scope module r1 $end
$var wire 1 ! clk $end
$var wire 5 J raddr1 [4:0] $end
$var wire 5 K raddr2 [4:0] $end
$var wire 1 $ reg_wr $end
$var wire 1 % rst $end
$var wire 5 L waddr [4:0] $end
$var wire 32 M wdata [31:0] $end
$var reg 32 N rdata1 [31:0] $end
$var reg 32 O rdata2 [31:0] $end
$var reg 32 P x0 [31:0] $end
$var reg 32 Q x1 [31:0] $end
$var reg 32 R x10 [31:0] $end
$var reg 32 S x11 [31:0] $end
$var reg 32 T x12 [31:0] $end
$var reg 32 U x13 [31:0] $end
$var reg 32 V x14 [31:0] $end
$var reg 32 W x15 [31:0] $end
$var reg 32 X x16 [31:0] $end
$var reg 32 Y x17 [31:0] $end
$var reg 32 Z x18 [31:0] $end
$var reg 32 [ x19 [31:0] $end
$var reg 32 \ x2 [31:0] $end
$var reg 32 ] x20 [31:0] $end
$var reg 32 ^ x21 [31:0] $end
$var reg 32 _ x22 [31:0] $end
$var reg 32 ` x23 [31:0] $end
$var reg 32 a x24 [31:0] $end
$var reg 32 b x25 [31:0] $end
$var reg 32 c x26 [31:0] $end
$var reg 32 d x27 [31:0] $end
$var reg 32 e x28 [31:0] $end
$var reg 32 f x29 [31:0] $end
$var reg 32 g x3 [31:0] $end
$var reg 32 h x30 [31:0] $end
$var reg 32 i x31 [31:0] $end
$var reg 32 j x4 [31:0] $end
$var reg 32 k x5 [31:0] $end
$var reg 32 l x6 [31:0] $end
$var reg 32 m x7 [31:0] $end
$var reg 32 n x8 [31:0] $end
$var reg 32 o x9 [31:0] $end
$var integer 32 p i [31:0] $end
$upscope $end
$upscope $end
$scope module top $end
$scope module r1 $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bz M
bz L
bz K
bz J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bz '
bz &
1%
z$
bz #
bz "
1!
$end
#5000
0!
#10000
0%
b0 .
b0 i
b0 /
b0 h
b0 1
b0 f
b0 2
b0 e
b0 3
b0 d
b0 4
b0 c
b0 5
b0 b
b0 6
b0 a
b0 7
b0 `
b0 8
b0 _
b0 9
b0 ^
b0 :
b0 ]
b0 <
b0 [
b0 =
b0 Z
b0 >
b0 Y
b0 ?
b0 X
b0 @
b0 W
b0 A
b0 V
b0 B
b0 U
b0 C
b0 T
b0 D
b0 S
b0 E
b0 R
b0 (
b0 o
b0 )
b0 n
b0 *
b0 m
b0 +
b0 l
b0 ,
b0 k
b0 -
b0 j
b0 0
b0 g
b0 ;
b0 \
b0 F
b0 Q
b100000 p
1!
#15000
0!
#20000
b0 I
b0 N
b101 "
b101 J
1$
b101 &
b101 L
b1010 '
b1010 M
1!
#25000
0!
#30000
0$
b1010 ,
b1010 k
b1010 I
b1010 N
1!
#35000
0!
#40000
1!
#40001
